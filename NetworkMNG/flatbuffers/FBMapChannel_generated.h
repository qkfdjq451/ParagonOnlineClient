// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBMAPCHANNEL_FBMAPCHANNEL_H_
#define FLATBUFFERS_GENERATED_FBMAPCHANNEL_FBMAPCHANNEL_H_

#include "flatbuffers/flatbuffers.h"

namespace FBMapChannel {

struct Vec3;

struct MapInfo;

MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3() {
    memset(this, 0, sizeof(Vec3));
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
STRUCT_END(Vec3, 12);

struct MapInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARACTERCODE = 4,
    VT_MAPCODE = 6,
    VT_CHANNEL = 8,
    VT_POSITION = 10
  };
  int32_t charactercode() const {
    return GetField<int32_t>(VT_CHARACTERCODE, 0);
  }
  int32_t mapCode() const {
    return GetField<int32_t>(VT_MAPCODE, 0);
  }
  int32_t channel() const {
    return GetField<int32_t>(VT_CHANNEL, 0);
  }
  const Vec3 *position() const {
    return GetStruct<const Vec3 *>(VT_POSITION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARACTERCODE) &&
           VerifyField<int32_t>(verifier, VT_MAPCODE) &&
           VerifyField<int32_t>(verifier, VT_CHANNEL) &&
           VerifyField<Vec3>(verifier, VT_POSITION) &&
           verifier.EndTable();
  }
};

struct MapInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charactercode(int32_t charactercode) {
    fbb_.AddElement<int32_t>(MapInfo::VT_CHARACTERCODE, charactercode, 0);
  }
  void add_mapCode(int32_t mapCode) {
    fbb_.AddElement<int32_t>(MapInfo::VT_MAPCODE, mapCode, 0);
  }
  void add_channel(int32_t channel) {
    fbb_.AddElement<int32_t>(MapInfo::VT_CHANNEL, channel, 0);
  }
  void add_position(const Vec3 *position) {
    fbb_.AddStruct(MapInfo::VT_POSITION, position);
  }
  explicit MapInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MapInfoBuilder &operator=(const MapInfoBuilder &);
  flatbuffers::Offset<MapInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MapInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<MapInfo> CreateMapInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t charactercode = 0,
    int32_t mapCode = 0,
    int32_t channel = 0,
    const Vec3 *position = 0) {
  MapInfoBuilder builder_(_fbb);
  builder_.add_position(position);
  builder_.add_channel(channel);
  builder_.add_mapCode(mapCode);
  builder_.add_charactercode(charactercode);
  return builder_.Finish();
}

}  // namespace FBMapChannel

#endif  // FLATBUFFERS_GENERATED_FBMAPCHANNEL_FBMAPCHANNEL_H_
